# -*- coding: utf-8 -*-
"""Blip age calculator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yTlPwPt5ZP3lQAaNrEvmqoqgiBJ191yH
"""

from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

# Constants
BLIP_START = datetime(2018, 5, 31)  # Start of the blip period
BLIP_END = datetime(2023, 10, 17)   # End of the blip period
BLIP_DURATION = (BLIP_END - BLIP_START).days  # Duration in days

def format_biological_birthday(biological_birthday):
    """Format the biological birthday as 'Month DaySuffix', e.g., 'August 1st'."""
    day = biological_birthday.day
    suffix = "th" if 11 <= day <= 13 else {1: "st", 2: "nd", 3: "rd"}.get(day % 10, "th")
    formatted_date = biological_birthday.strftime(f"%B {day}{suffix}")
    return formatted_date

def calculate_ages_and_dating_pool(birthday_str, blipped):
    """
    Calculate legal age, biological age (in years and days), biological birthday,
    and acceptable dating pool based on the blip status.

    :param birthday_str: The birthday of the user in "YYYY-MM-DD" format.
    :param blipped: Boolean indicating if the user was blipped (True if blipped, False if not).
    :return: A dictionary with legal age, biological age, biological birthday,
             and the oldest/youngest partner birthdates for blipped and spared scenarios.
    """
    # Convert birthday string to datetime object
    birthday = datetime.strptime(birthday_str, "%Y-%m-%d")

    # Simulate today's date as if it were 3 years in the future, accounting for leap years
    today = datetime.now() + relativedelta(years=3)

    # 1. Calculate legal age (number of birthdays they've existed for)
    legal_age = today.year - birthday.year
    if (today.month, today.day) < (birthday.month, birthday.day):
        legal_age -= 1  # Adjust if their birthday hasn't occurred yet this year

    # If they were blipped, adjust legal age by subtracting the birthdays missed
    if blipped:
        # Check if birthday was within blip period
        blip_birthday_count = 0
        for year in range(BLIP_START.year, BLIP_END.year + 1):
            birthday_this_year = birthday.replace(year=year)
            if BLIP_START <= birthday_this_year <= BLIP_END:
                blip_birthday_count += 1

        legal_age -= blip_birthday_count

    # 2. Calculate biological age (total days lived as years and remaining days)
    if blipped:
        # Calculate the days lived excluding the blip period
        pre_blip_days = (BLIP_START - birthday).days if birthday < BLIP_START else 0
        post_blip_days = (today - BLIP_END).days if today > BLIP_END else 0
        days_lived = pre_blip_days + post_blip_days
    else:
        # If not blipped, calculate the days from birth to today
        days_lived = (today - birthday).days

    # Calculate complete years and remaining days
    biological_years = days_lived // 365  # Complete years
    remaining_days = days_lived % 365     # Remaining days after those years

    # 3. Calculate biological birthday
    # Find how many days they were away from their birthday (May 31) when the blip started
    birthday_in_blip_year = birthday.replace(year=BLIP_START.year)
    if birthday_in_blip_year < BLIP_START:
        next_birthday = birthday_in_blip_year + relativedelta(years=1)
    else:
        next_birthday = birthday_in_blip_year

    days_to_birthday = (next_birthday - BLIP_START).days  # Days from blip start to their next birthday

    # Add the same number of days to the end of the blip to get their new biological birthday
    biological_birthday = BLIP_END + timedelta(days=days_to_birthday)

    # Format biological birthday as "Month DaySuffix"
    formatted_biological_birthday = format_biological_birthday(biological_birthday)

    # 4. Calculate minimum acceptable biological age for dating pool
    acceptable_min_age = (biological_years / 2) + 7
    acceptable_max_age = (biological_years - 7) * 2

    # 5. Calculate Partner Birthdates for blipped and spared
    def calculate_partner_birthdate(age, today_date, is_blipped):
        """
        Calculate partner's birthdate based on their biological age, considering whether they were blipped.
        """
        if is_blipped:
            # If the partner was blipped, they missed time during the blip, so we subtract both their lived days
            # and the duration of the blip to find their birthdate
            total_days_lived = (age * 365) + BLIP_DURATION
        else:
            # If the partner was spared, they lived through the blip, so only subtract the total lived days
            total_days_lived = age * 365

        # Calculate their birthdate by subtracting the days lived from today
        partner_birthdate = today_date - timedelta(days=total_days_lived)
        return partner_birthdate.date()

    # Calculate oldest and youngest acceptable partner birthdates (blipped and spared)
    oldest_partner_blipped_birthday = calculate_partner_birthdate(acceptable_max_age, today, True)
    oldest_partner_spared_birthday = calculate_partner_birthdate(acceptable_max_age, today, False)

    youngest_partner_blipped_birthday = calculate_partner_birthdate(acceptable_min_age, today, True)
    youngest_partner_spared_birthday = calculate_partner_birthdate(acceptable_min_age, today, False)

    # Output the results
    return {
        "legal_age": legal_age,
        "biological_years": biological_years,
        "remaining_days": remaining_days,
        "biological_birthday": formatted_biological_birthday,
        "oldest_partner_blipped_birthday": oldest_partner_blipped_birthday,
        "oldest_partner_spared_birthday": oldest_partner_spared_birthday,
        "youngest_partner_blipped_birthday": youngest_partner_blipped_birthday,
        "youngest_partner_spared_birthday": youngest_partner_spared_birthday
    }

# Main block to run the script
if __name__ == "__main__":
    # Prompt the user for input
    birthday_str = input("Enter your birthday (YYYY-MM-DD): ")
    blipped_input = input("Were you blipped? (yes/no): ").strip().lower()

    # Convert the blipped input to a boolean
    blipped = True if blipped_input == 'yes' else False

    # Call the function and display the results
    result = calculate_ages_and_dating_pool(birthday_str, blipped)

    # Print the results
    print("Current Date:", (datetime.now() + relativedelta(years=3)).date())
    print("Legal Age:", result["legal_age"])
    print("Biological Age: {} years and {} days".format(result["biological_years"], result["remaining_days"]))
    print("Biological Birthday:", result["biological_birthday"])

    print('Potential Dating Pool')
    print("Oldest Partner Birthdate (Blipped):", result["oldest_partner_blipped_birthday"])
    print("Oldest Partner Birthdate (Spared):", result["oldest_partner_spared_birthday"])
    print("Youngest Partner Birthdate (Blipped):", result["youngest_partner_blipped_birthday"])
    print("Youngest Partner Birthdate (Spared):", result["youngest_partner_spared_birthday"])

        # Pause before exit to view the results
    input("\nPress Enter to exit...")